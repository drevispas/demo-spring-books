server:
  port: 9000

logging:
  level:
    org.springframework.security: trace

spring:
  application:
    name: footballauth
  security:
    oauth2:
      authorizationserver:
        client:
          football:
            registration:
              client-id: "football"
              # `{noops}` is a password encoder that does nothing that is used to store the client secret in plain text.
              client-secret: "{noop}SuperSecret"
              client-authentication-methods:
                # With `client_secret_post`, the client sends the client ID and client secret in the body of POST request.
                - "client_secret_post"
              authorization-grant-types:
               # `client_credentials` is used when the client interacts with users
                - "client_credentials"
              # List of scopes that the client is allowed to request.
              scopes:
                - "football:read"
                - "football:admin"
            token:
              # Change access token's TTL to 1 hour (default is 5 minutes).
              access-token-time-to-live: 2592000000
          football-ui:
            registration:
              client-id: "football-ui"
              client-secret: "{noop}TheSecretSauce"
              client-authentication-methods:
                # `client_secret_basic` sends the client ID and client secret in the Authorization header in the form of `Basic` authentication.
                - "client_secret_basic"
              authorization-grant-types:
                - "authorization_code"
                - "refresh_token"
                - "client_credentials"
              # URI to redirect to after the user logs in. This should match the redirect URI of the client registration in `footballui` service.
              # Redirect GET method in the form of `http://localhost:9080/login/oauth2/code/football-ui?code=xxx&state=yyy`.
              redirect-uris:
                - "http://localhost:9080/login/oauth2/code/football-ui"
              scopes:
                - "openid"
                - "profile"
                - "football:read"
                - "football:admin"
            require-authorization-consent: true
      # The authorization server becomes a client to Google identity provider. It makes the clients to sign in with Google through the authorization server.
      # In that case the authorization server don't need a repository to store the client details (see below user.name and user.password).
      # But it still issues tokens to the client by itself rather than Google.
      client:
        registration:
          football-google:
            client-id: "831976824273-36hfu7o62lle98tcpira60ujb14kd8e8.apps.googleusercontent.com"
            client-secret: "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"
            # URI should match the redirect URI of Google client registration.
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            scope:
              - openid
              - profile
              - email
        provider:
          football-google:
            issuer-uri: "https://accounts.google.com"
            user-name-attribute: given_name
    # used for signing in the authorization server to get the authorization code.
    # This is not used when using Google as the identity provider.
    user:
      name: "user"
      password: "{noop}password"
